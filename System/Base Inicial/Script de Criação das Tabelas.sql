CREATE TABLE MESES (
  COD_MES INTEGER NOT NULL,
  MES INTEGER ,
PRIMARY KEY(COD_MES));


CREATE TABLE TB_CURSO (
  CUR_CODIGO INTEGER  NOT NULL  ,
  CUR_DESCRICAO VARCHAR(50)      ,
PRIMARY KEY(CUR_CODIGO));


CREATE TABLE TB_MENSALIDADE (
  MEN_CODIGO INTEGER  NOT NULL  ,
  MEN_NOME VARCHAR(50)    ,
  MEN_VALOR DECIMAL(10,02)      ,
PRIMARY KEY(MEN_CODIGO));


CREATE TABLE TB_PROFESSOR (
  PRO_CODIGO INTEGER  NOT NULL  ,
  PRO_NOME VARCHAR(50)    ,
  PRO_DTNASCIMENTO DATE    ,
  PRO_LOGRADOURO VARCHAR(50)    ,
  PRO_CIDADE VARCHAR(30)    ,
  PRO_ESTADO VARCHAR(2)    ,
  PRO_NUMERO VARCHAR(5)    ,
  PRO_COMPLEMENTO VARCHAR(30)    ,
  PRO_BAIRRO VARCHAR(30)    ,
  PRO_TELEFONE VARCHAR(20)    ,
  PRO_EMAIL VARCHAR(30)    ,
  PRO_DTMATRICULA DATE    ,
  PRO_SEXO VARCHAR(1)    ,
  PRO_ESTADOCIVIL VARCHAR(15)    ,
  PRO_EHGESTOR VARCHAR(1)    ,
  PRO_EHMESTRE VARCHAR(1),
  PRO_USUARIO VARCHAR( 50 ),
  PRO_SENHA VARCHAR( 6 ),
  PRO_FOTO VARCHAR( 255 ),
PRIMARY KEY(PRO_CODIGO));


CREATE TABLE TB_GRADUACAO (
  GRA_CODIGO INTEGER  NOT NULL  ,
  TB_CURSO_CUR_CODIGO INTEGER  NOT NULL  ,
  GRA_DESCRICAO VARCHAR(50)      ,
PRIMARY KEY(GRA_CODIGO)  ,
  FOREIGN KEY(TB_CURSO_CUR_CODIGO)
    REFERENCES TB_CURSO(CUR_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);


CREATE TABLE TB_EXERCICIO (
  EXE_CODIGO INTEGER  NOT NULL  ,
  PRIMARY KEY(EXE_CODIGO)  ,
  TB_GRADUACAO_GRA_CODIGO INTEGER  NOT NULL  ,
  EXE_DESCRICAO VARCHAR(50)      ,
  FOREIGN KEY(TB_GRADUACAO_GRA_CODIGO)
    REFERENCES TB_GRADUACAO(GRA_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);


CREATE TABLE TB_ALUNO (
  ALU_CODIGO INTEGER  NOT NULL  ,
  TB_CURSO_CUR_CODIGO INTEGER  NOT NULL  ,
  TB_MENSALIDADE_MEN_CODIGO INTEGER  NOT NULL  ,
  TB_GRADUACAO_GRA_CODIGO INTEGER  NOT NULL  ,
  ALU_NOME VARCHAR(50)    ,
  ALU_QTDAULAS INTEGER    ,
  ALU_DTNASCIMENTO DATE    ,
  ALU_DTMATRICULA DATE    ,
  ALU_TELEFONE VARCHAR(20)    ,
  ALU_EMAIL VARCHAR(30)    ,
  ALU_LOGRADOURO VARCHAR(50)    ,
  ALU_CIDADE VARCHAR(30)    ,
  ALU_ESTADO VARCHAR(2)    ,
  ALU_NUMERO VARCHAR(5)    ,
  ALU_COMPLEMENTO VARCHAR(30)    ,
  ALU_BAIRRO VARCHAR(30)    ,
  ALU_DIAVENCMENSALIDAE INT    ,
  ALU_SEXO VARCHAR(1)    ,
  ALU_DESCONTO NUMERIC(3,2)    ,
  ALU_ESTADOCIVIL VARCHAR(15)      ,
  ALU_OBSMEDICAL VARCHAR(255)      ,
  ALU_TIPOSANGUINEO VARCHAR(10)      ,
  ALU_FOTO VARCHAR( 255 ),
PRIMARY KEY(ALU_CODIGO)    ,
  FOREIGN KEY(TB_MENSALIDADE_MEN_CODIGO)
    REFERENCES TB_MENSALIDADE(MEN_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(TB_CURSO_CUR_CODIGO)
    REFERENCES TB_CURSO(CUR_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(TB_GRADUACAO_GRA_CODIGO)
    REFERENCES TB_GRADUACAO(GRA_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);


CREATE TABLE TB_PAGAMENTOS (
  SEQUENCIAL INTEGER  NOT NULL  ,
  TB_ALUNO_ALU_CODIGO INTEGER  NOT NULL  ,
  TB_MENSALIDADE_MEN_CODIGO INTEGER  NOT NULL  ,
  PAG_DTPAGAMENTO DATE    ,
  PAG_VALORPAGO DECIMAL(10,02)    ,
  PAG_VALORAPAGAR DECIMAL(10,02)      ,
PRIMARY KEY(SEQUENCIAL)    ,
  FOREIGN KEY(TB_ALUNO_ALU_CODIGO)
    REFERENCES TB_ALUNO(ALU_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(TB_MENSALIDADE_MEN_CODIGO)
    REFERENCES TB_MENSALIDADE(MEN_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);


CREATE TABLE TB_AULA (
  AUL_DATA DATE  NOT NULL  ,
  AUL_HORARIO TIME  NOT NULL  ,
  SEQUENCIAL INTEGER  NOT NULL  ,
  TB_PROFESSOR_PRO_CODIGO INTEGER  NOT NULL  ,
  TB_EXERCICIO_EXE_CODIGO INTEGER  NOT NULL  ,
  TB_ALUNO_ALU_CODIGO INTEGER  NOT NULL  ,
  AUL_ASSUNTO VARCHAR(255)    ,
  AUL_OBSERVACOES VARCHAR(255)      ,
PRIMARY KEY(SEQUENCIAL)      ,
  FOREIGN KEY(TB_PROFESSOR_PRO_CODIGO)
    REFERENCES TB_PROFESSOR(PRO_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(TB_EXERCICIO_EXE_CODIGO)
    REFERENCES TB_EXERCICIO(EXE_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(TB_ALUNO_ALU_CODIGO)
    REFERENCES TB_ALUNO(ALU_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);


CREATE TABLE TB_EXAMES (
  EXA_DATA DATE  NOT NULL  ,
  EXA_HORARIO TIME  NOT NULL  ,
  SEQUENCIAL INTEGER  NOT NULL  ,
  TB_PROFESSOR_PRO_CODIGO INTEGER  NOT NULL  ,
  TB_CURSO_CUR_CODIGO INTEGER  NOT NULL  ,
  TB_GRADUACAO_GRA_CODIGO INTEGER  NOT NULL  ,
  TB_ALUNO_ALU_CODIGO INTEGER  NOT NULL  ,
  EXA_MEDIA DECIMAL(2,1)    ,
  EXA_RESULTADO VARCHAR(1)    ,
PRIMARY KEY(SEQUENCIAL)          ,
  FOREIGN KEY(TB_ALUNO_ALU_CODIGO)
    REFERENCES TB_ALUNO(ALU_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(TB_PROFESSOR_PRO_CODIGO)
    REFERENCES TB_PROFESSOR(PRO_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(TB_CURSO_CUR_CODIGO)
    REFERENCES TB_CURSO(CUR_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(TB_GRADUACAO_GRA_CODIGO)
    REFERENCES TB_GRADUACAO(GRA_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(TB_ALUNO_ALU_CODIGO)
    REFERENCES TB_ALUNO(ALU_CODIGO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);


/*CRIAÇÃO DOS INDICES DAS CHAVES ESTRANGEIRAS*/

CREATE INDEX TB_GRADUACAO_FKIndex1 ON TB_GRADUACAO (TB_CURSO_CUR_CODIGO);
CREATE INDEX TB_EXERCICIO_FKIndex1 ON TB_EXERCICIO (TB_GRADUACAO_GRA_CODIGO);
CREATE INDEX TB_ALUNO_FKIndex1 ON TB_ALUNO (TB_MENSALIDADE_MEN_CODIGO);
CREATE INDEX TB_ALUNO_FKIndex2 ON TB_ALUNO (TB_CURSO_CUR_CODIGO);
CREATE INDEX TB_PAGAMENTOS_FKIndex1 ON TB_PAGAMENTOS (TB_ALUNO_ALU_CODIGO);
CREATE INDEX TB_PAGAMENTOS_FKIndex2 ON TB_PAGAMENTOS (TB_MENSALIDADE_MEN_CODIGO);
CREATE INDEX TB_AULA_FKIndex1 ON TB_AULA (TB_PROFESSOR_PRO_CODIGO);
CREATE INDEX TB_AULA_FKIndex2 ON TB_AULA (TB_EXERCICIO_EXE_CODIGO);
CREATE INDEX TB_AULA_FKIndex3 ON TB_AULA (TB_ALUNO_ALU_CODIGO);
CREATE INDEX TB_EXAMES_FKIndex1 ON TB_EXAMES (TB_ALUNO_ALU_CODIGO);
CREATE INDEX TB_EXAMES_FKIndex2 ON TB_EXAMES (TB_PROFESSOR_PRO_CODIGO);
CREATE INDEX TB_EXAMES_FKIndex3 ON TB_EXAMES (TB_CURSO_CUR_CODIGO);
CREATE INDEX TB_EXAMES_FKIndex4 ON TB_EXAMES (TB_GRADUACAO_GRA_CODIGO);
CREATE INDEX TB_EXAMES_FKIndex5 ON TB_EXAMES (TB_ALUNO_ALU_CODIGO);


/*CRIAÇÃO DOS INDICES DAS CHAVES PRIMÁRIAS*/

CREATE INDEX TB_CURSO_PKIndex1 ON TB_CURSO (CUR_CODIGO);
CREATE INDEX TB_MENSALIDADE_PKIndex1 ON TB_MENSALIDADE (MEN_CODIGO);
CREATE INDEX TB_PAGAMENTOS_PKIndex1 ON TB_PAGAMENTOS (SEQUENCIAL);
CREATE INDEX TB_ALUNO_PKIndex1 ON TB_ALUNO (ALU_CODIGO);
CREATE INDEX TB_AULA_PKIndex1 ON TB_AULA (SEQUENCIAL);
CREATE INDEX TB_EXERCICIO_PKIndex1 ON TB_EXERCICIO (EXE_CODIGO);
CREATE INDEX TB_GRADUACAO_PKIndex1 ON TB_GRADUACAO (GRA_CODIGO);
CREATE INDEX TB_PROFESSOR_PKIndex1 ON TB_PROFESSOR (PRO_CODIGO);
CREATE INDEX TB_EXAMES_PKIndex1 ON TB_EXAMES (SEQUENCIAL);


/* CRIAÇÃO DE SEQUENCIAIS PARA O AUTO INCREMENTO */

CREATE SEQUENCE TB_CURSO_PKIndex1;
CREATE SEQUENCE TB_MENSALIDADE_PKIndex1;
CREATE SEQUENCE TB_PAGAMENTOS_PKIndex1;
CREATE SEQUENCE TB_ALUNO_PKIndex1;
CREATE SEQUENCE TB_AULA_PKIndex1;
CREATE SEQUENCE TB_EXERCICIO_PKIndex1;
CREATE SEQUENCE TB_GRADUACAO_PKIndex1;
CREATE SEQUENCE TB_PROFESSOR_PKIndex1;
CREATE SEQUENCE TB_EXAMES_PKIndex1;


/* TRIGERS PARA AUTO INCREMENTO NAS INSERÇÕES */

SET TERM ^ ;

CREATE TRIGGER INSERT_CURSO FOR TB_CURSO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.CUR_CODIGO IS NULL) THEN
    NEW.CUR_CODIGO = GEN_ID(TB_CURSO_PKIndex1,1);
END
^

SET TERM ; ^


SET TERM ^ ;

CREATE TRIGGER INSERT_MENSALIDADE FOR TB_MENSALIDADE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.MEN_CODIGO IS NULL) THEN
    NEW.MEN_CODIGO = GEN_ID(TB_MENSALIDADE_PKIndex1,1);
END
^

SET TERM ; ^


SET TERM ^ ;

CREATE TRIGGER INSERT_PAGAMENTOS FOR TB_PAGAMENTOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.SEQUENCIAL IS NULL) THEN
    NEW.SEQUENCIAL = GEN_ID(TB_PAGAMENTOS_PKIndex1,1);
END
^

SET TERM ; ^


SET TERM ^ ;

CREATE TRIGGER INSERT_ALUNO FOR TB_ALUNO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ALU_CODIGO IS NULL) THEN
    NEW.ALU_CODIGO = GEN_ID(TB_ALUNO_PKIndex1,1);
END
^

SET TERM ; ^


SET TERM ^ ;

CREATE TRIGGER INSERT_AULA FOR TB_AULA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.SEQUENCIAL IS NULL) THEN
    NEW.SEQUENCIAL = GEN_ID(TB_AULA_PKIndex1,1);
END
^

SET TERM ; ^


SET TERM ^ ;

CREATE TRIGGER INSERT_EXERCICIO FOR TB_EXERCICIO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.EXE_CODIGO IS NULL) THEN
    NEW.EXE_CODIGO = GEN_ID(TB_EXERCICIO_PKIndex1,1);
END
^

SET TERM ; ^


SET TERM ^ ;

CREATE TRIGGER INSERT_GRADUACAO FOR TB_GRADUACAO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.GRA_CODIGO IS NULL) THEN
    NEW.GRA_CODIGO = GEN_ID(TB_GRADUACAO_PKIndex1,1);
END
^

SET TERM ; ^


SET TERM ^ ;

CREATE TRIGGER INSERT_PROFESSOR FOR TB_PROFESSOR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.PRO_CODIGO IS NULL) THEN
    NEW.PRO_CODIGO = GEN_ID(TB_PROFESSOR_PKIndex1,1);
END
^

SET TERM ; ^


SET TERM ^ ;

CREATE TRIGGER INSERT_EXAMES FOR TB_EXAMES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.SEQUENCIAL IS NULL) THEN
    NEW.SEQUENCIAL = GEN_ID(TB_EXAMES_PKIndex1,1);
END
^

SET TERM ; ^

INSERT INTO MESES ( COD_MES, MES ) VALUES ( 01, 1);
INSERT INTO MESES ( COD_MES, MES ) VALUES ( 02, 2);
INSERT INTO MESES ( COD_MES, MES ) VALUES ( 03, 3);
INSERT INTO MESES ( COD_MES, MES ) VALUES ( 04, 4);
INSERT INTO MESES ( COD_MES, MES ) VALUES ( 05, 5);
INSERT INTO MESES ( COD_MES, MES ) VALUES ( 06, 6);
INSERT INTO MESES ( COD_MES, MES ) VALUES ( 07, 7);
INSERT INTO MESES ( COD_MES, MES ) VALUES ( 08, 8);
INSERT INTO MESES ( COD_MES, MES ) VALUES ( 09, 9);
INSERT INTO MESES ( COD_MES, MES ) VALUES ( 10, 10);
INSERT INTO MESES ( COD_MES, MES ) VALUES ( 11, 11);
INSERT INTO MESES ( COD_MES, MES ) VALUES ( 12, 12);
